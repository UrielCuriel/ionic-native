var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var SumUp = /** @class */ (function (_super) {
    __extends(SumUp, _super);
    function SumUp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SumUp.prototype.login = function (accessToken) { return cordova(this, "login", {}, arguments); };
    SumUp.prototype.auth = function (accessToken) { return cordova(this, "auth", {}, arguments); };
    SumUp.prototype.getSettings = function () { return cordova(this, "getSettings", {}, arguments); };
    SumUp.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    SumUp.prototype.isLoggedIn = function () { return cordova(this, "isLoggedIn", {}, arguments); };
    SumUp.prototype.prepare = function () { return cordova(this, "prepare", {}, arguments); };
    SumUp.prototype.closeConnection = function () { return cordova(this, "closeConnection", {}, arguments); };
    SumUp.prototype.pay = function (amount, currencycode) { return cordova(this, "pay", {}, arguments); };
    SumUp.pluginName = "SumUp";
    SumUp.plugin = "cordova-sumup-plugin";
    SumUp.pluginRef = "window.SumUp";
    SumUp.repo = "https://github.com/mariusbackes/cordova-plugin-sumup";
    SumUp.install = "cordova plugin add cordova-sumup-plugin --variable SUMUP_API_KEY=INSERT_YOUR_KEY";
    SumUp.installVariables = ["SUMUP_API_KEY"];
    SumUp.platforms = ["Android", "iOS"];
    SumUp = __decorate([
        Injectable()
    ], SumUp);
    return SumUp;
}(IonicNativePlugin));
export { SumUp };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3N1bS11cC9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUE4RzdDLHlCQUFpQjs7OztJQVMxQyxxQkFBSyxhQUFDLFdBQW9CO0lBVTFCLG9CQUFJLGFBQUMsV0FBbUI7SUFTeEIsMkJBQVc7SUFTWCxzQkFBTTtJQVNOLDBCQUFVO0lBVVYsdUJBQU87SUFTUCwrQkFBZTtJQVlmLG1CQUFHLGFBQUMsTUFBYyxFQUFFLFlBQW9COzs7Ozs7OztJQTdFN0IsS0FBSztRQURqQixVQUFVLEVBQUU7T0FDQSxLQUFLO2dCQS9HbEI7RUErRzJCLGlCQUFpQjtTQUEvQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3VtVXBSZXNwb25zZSB7XG4gIC8vIENvZGUgdG8gaWRlbnRpZnkgdGhlIG1lc3NhZ2VcbiAgY29kZTogbnVtYmVyO1xuXG4gIC8vIE1lc3NhZ2UgZm9yIHJlYWRhYmxlIHVzYWdlXG4gIG1lc3NhZ2U6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdW1VcExvZ2luU3RhdHVzIHtcbiAgLy8gQ29kZSwgdG8gY2hlY2sgaWYgYW4gZXJyb3Igb2NjdXJlZFxuICBjb2RlOiBudW1iZXI7XG5cbiAgLy8gQm9vbGVhbmQgdmFsdWUgd2hldGhlciB0aGUgdXNlciBpcyBsb2dnZWQgaW4gb3Igbm90XG4gIGlzTG9nZ2VkSW46IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3VtVXBQYXltZW50IHtcbiAgLy8gVW5pcXVlIHRyYW5zYWN0aW9uIGNvZGVcbiAgdHJhbnNhY3Rpb25fY29kZTogc3RyaW5nO1xuXG4gIC8vIENhcmQgdHlwZSAtPiBsaWtlIE1BRVNUUk9cbiAgY2FyZF90eXBlOiBzdHJpbmc7XG5cbiAgLy8gTWVyY2hhbnQgY29kZSBmb3IgaWRlbnRpZmljYXRpb25cbiAgbWVyY2hhbnRfY29kZTogc3RyaW5nO1xuXG4gIC8vIEFtb3VudCBvZiB0aGUgcGF5bWVudFxuICBhbW91bnQ6IG51bWJlcjtcblxuICAvLyBUaXAgYW1vdW50IC0+IGRlZmF1bHQgMFxuICB0aXBfYW1vdW50OiBudW1iZXI7XG5cbiAgLy8gVmF0IGFtb3VudCAtPiBkZWZhdWx0IDBcbiAgdmF0X2Ftb3VudDogbnVtYmVyO1xuXG4gIC8vIEN1cnJlbmN5IGNvZGUgLT4gbGlrZSBFVVJcbiAgY3VycmVuY3k6IHN0cmluZztcblxuICAvLyBQYXltZW50IHN0YXR1cyAtPiBzdWNjZXNzZnVsIG9yIGVycm9yXG4gIHN0YXR1czogc3RyaW5nO1xuXG4gIC8vIFR5cGUgLT4gQ2FyZCBvciBuZmNcbiAgcGF5bWVudF90eXBlOiBzdHJpbmc7XG5cbiAgLy8gRW50cnkgbW9kZSAtPiBMaWtlIGNoaXAgb3IgY29udGFjdGxlc3NcbiAgZW50cnlfbW9kZTogc3RyaW5nO1xuXG4gIC8vIE51bWJlciBvZiBpbnN0YWxsbWVudHMgLT4gZGVmYXVsdCAxXG4gIGluc3RhbGxtZW50czogbnVtYmVyO1xufVxuXG4vKipcbiAqIEBuYW1lIFN1bVVwXG4gKiBAZGVzY3JpcHRpb25cbiAqIFBsdWdpbiB0byBjb21tdW5pY2F0ZSB3aXRoIGEgU3VtVXAgcGF5bWVudCB0ZXJtaW5hbFxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgU3VtVXAgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3N1bS11cCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgc3VtVXA6IFN1bVVwKSB7IH1cbiAqXG4gKiB0aGlzLnN1bVVwLmxvZ2luKFwiQUNDRVNTX1RPS0VOXCIpXG4gKiAgIC50aGVuKChyZXM6IFN1bVVwUmVzcG9uc2UpID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IFN1bVVwUmVzcG9uc2UpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiAgdGhpcy5zdW1VcC5hdXRoKFwiQUNDRVNTX1RPS0VOXCIpXG4gKiAgIC50aGVuKChyZXM6IFN1bVVwUmVzcG9uc2UpID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IFN1bVVwUmVzcG9uc2UpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiAgdGhpcy5zdW1VcC5nZXRTZXR0aW5ncygpXG4gKiAgIC50aGVuKChyZXM6IFN1bVVwUmVzcG9uc2UpID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IFN1bVVwUmVzcG9uc2UpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiAgdGhpcy5zdW1VcC5sb2dvdXQoKVxuICogICAudGhlbigocmVzOiBTdW1VcFJlc3BvbnNlKSA9PiBjb25zb2xlLmxvZyhyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBTdW1VcFJlc3BvbnNlKSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogIHRoaXMuc3VtVXAuaXNMb2dnZWRJbigpXG4gKiAgIC50aGVuKChyZXM6IFN1bVVwTG9naW5TdGF0dXMpID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IFN1bVVwTG9naW5TdGF0dXMpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiAgdGhpcy5zdW1VcC5wcmVwYXJlKClcbiAqICAgLnRoZW4oKHJlczogU3VtVXBSZXNwb25zZSkgPT4gY29uc29sZS5sb2cocmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogU3VtVXBSZXNwb25zZSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIHRoaXMuc3VtVXAuY2xvc2VDb25uZWN0aW9uKClcbiAqICAgLnRoZW4oKHJlczogU3VtVXBSZXNwb25zZSkgPT4gY29uc29sZS5sb2cocmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogU3VtVXBSZXNwb25zZSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIHRoaXMuc3VtVXAucGF5KDEwLjAsIFwiRVVSXCIpXG4gKiAgIC50aGVuKChyZXM6IFN1bVVwUGF5bWVudCkgPT4gY29uc29sZS5sb2cocmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogU3VtVXBQYXltZW50KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnU3VtVXAnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXN1bXVwLXBsdWdpbicsXG4gIHBsdWdpblJlZjogJ3dpbmRvdy5TdW1VcCcsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vbWFyaXVzYmFja2VzL2NvcmRvdmEtcGx1Z2luLXN1bXVwJyxcbiAgaW5zdGFsbDpcbiAgICAnY29yZG92YSBwbHVnaW4gYWRkIGNvcmRvdmEtc3VtdXAtcGx1Z2luIC0tdmFyaWFibGUgU1VNVVBfQVBJX0tFWT1JTlNFUlRfWU9VUl9LRVknLFxuICBpbnN0YWxsVmFyaWFibGVzOiBbJ1NVTVVQX0FQSV9LRVknXSxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ11cbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU3VtVXAgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBMb2dpbiBhIHVzZXIgd2l0aCBhbiBvcHRpb25hbCBhY2Nlc3MgdG9rZW4uXG4gICAqIElmIHRoZSBhY2Nlc3MgdG9rZW4gaXMgcHJvdmlkZWQgYW5kIHZhbGlkLCB0aGUgdXNlciBpcyBsb2dnZWQgaW4gYXV0bWF0aWNhbGx5LlxuICAgKiBPdGhlcndpc2UgdGhlIHVzZXIgaGFzIHRvIHR5cGUgaW4gdGhlIGNyZWRlbnRpYWxzXG4gICAqIEBwYXJhbSBhY2Nlc3NUb2tlbiB7c3RyaW5nfVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPFN1bVVwUmVzcG9uc2U+fSBSZXR1cm4gYSBTdW1VcFJlc3BvbnNlIG9iamVjdFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBsb2dpbihhY2Nlc3NUb2tlbj86IHN0cmluZyk6IFByb21pc2U8U3VtVXBSZXNwb25zZT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBdXRoZW50aWNhdGVzIHRoZSBhY2NvdW50IHdpdGggdGhlIGdpdmVuIGFjY2VzcyB0b2tlbi4gUGFyYW1ldGVyIGFjY2Vzc1Rva2VuIGlzIHJlcXVpcmVkLlxuICAgKiBAcGFyYW0gYWNjZXNzVG9rZW4ge3N0cmluZ31cbiAgICogQHJldHVybiB7UHJvbWlzZTxTdW1VcFJlc3BvbnNlPn0gUmV0dXJuIGEgU3VtVXBSZXNwb25zZSBvYmplY3RcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgYXV0aChhY2Nlc3NUb2tlbjogc3RyaW5nKTogUHJvbWlzZTxTdW1VcFJlc3BvbnNlPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIGEgbmV3IHdpbmRvdyB3aXRoIHRoZSBhbGwgYWNjb3VudCBzZXR0aW5ncyBvZiBhbiBsb2dnZWQgaW4gdXNlci5cbiAgICogQHJldHVybiB7UHJvbWlzZTxTdW1VcFJlc3BvbnNlPn0gUmV0dXJuIGEgU3VtVXBSZXNwb25zZSBvYmplY3RcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZ2V0U2V0dGluZ3MoKTogUHJvbWlzZTxTdW1VcFJlc3BvbnNlPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIExvZ291dCBhIHVzZXIgZnJvbSB0aGUgYWNjb3VudC5cbiAgICogQHJldHVybiB7UHJvbWlzZTxTdW1VcFJlc3BvbnNlPn0gUmV0dXJuIGEgU3VtVXBSZXNwb25zZSBvYmplY3RcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgbG9nb3V0KCk6IFByb21pc2U8U3VtVXBSZXNwb25zZT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciB0aGUgdXNlciBpcyBsb2dnZWQgaW4gb3Igbm90IGFuZCByZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSBmaWVsZCBpc0xvZ2dlZEluIHdoaWNoIGlzIGEgYm9vbGVhbiB2YWx1ZS5cbiAgICogQHJldHVybiB7UHJvbWlzZTxTdW1VcFJlc3BvbnNlPn0gUmV0dXJuIGEgU3VtVXBSZXNwb25zZSBvYmplY3RcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNMb2dnZWRJbigpOiBQcm9taXNlPFN1bVVwTG9naW5TdGF0dXM+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUHJlcGFyZXMgdGhlIHRlcm1pbmFsIGZvciBhIHBheW1lbnQuIENoZWNrcyB3aGV0aGVyIHRoZSBDYXJkUmVhZGVyIGlzIHJlYWR5IHRvIHRyYW5zbWl0IGFuZFxuICAgKiBpZiBhbiBpbnN0YW5jZSBvZiB0aGUgQ2FyZFJlYWRlck1hbmFnZXIgaXMgYXZhaWxhYmxlLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPFN1bVVwUmVzcG9uc2U+fSBSZXR1cm4gYSBTdW1VcFJlc3BvbnNlIG9iamVjdFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBwcmVwYXJlKCk6IFByb21pc2U8U3VtVXBSZXNwb25zZT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmllcyB0byBjbG9zZSB0aGUgY29ubmVjdGlvbiB0byB0aGUgY2FyZCB0ZXJtaW5hbC5cbiAgICogQHJldHVybiB7UHJvbWlzZTxTdW1VcFJlc3BvbnNlPn0gUmV0dXJuIGEgU3VtVXBSZXNwb25zZSBvYmplY3RcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgY2xvc2VDb25uZWN0aW9uKCk6IFByb21pc2U8U3VtVXBSZXNwb25zZT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyBhIG5hdGl2ZSBTdW1VcCB3aW5kb3cgdG8gcHJvY2VlZCBhIHBheW1lbnQuIFBhcmFtZXRlciBhbW91bnQgYW5kIGN1cnJlbmN5Y29kZSBhcmUgcmVxdWlyZWQuXG4gICAqIElmIHRoZSBQYXltZW50IHdhcyBzdWNjZXNzZnVsIGl0IHJldHVybnMgYW4gU3VtVXBQYXltZW50IG9iamVjdCB3aXRoIGluZm9ybWF0aW9uIGFib3V0IHRoZSBwYXltZW50LlxuICAgKiBAcGFyYW0gYW1vdW50IHtudW1iZXJ9XG4gICAqIEBwYXJhbSBjdXJyZW5jeWNvZGUge3N0cmluZ31cbiAgICogQHJldHVybiB7UHJvbWlzZTxTdW1VcFJlc3BvbnNlPn0gUmV0dXJuIGEgU3VtVXBSZXNwb25zZSBvYmplY3RcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcGF5KGFtb3VudDogbnVtYmVyLCBjdXJyZW5jeWNvZGU6IHN0cmluZyk6IFByb21pc2U8U3VtVXBQYXltZW50PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=